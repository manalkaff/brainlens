# Development Docker Compose for BrainLens Learning Platform
version: '3.8'

services:
  # SearXNG Meta Search Engine
  searxng:
    image: searxng/searxng:latest
    container_name: brainlens-searxng
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./searxng/settings.yml:/etc/searxng/settings.yml:ro
      - ./searxng/uwsgi.ini:/etc/searxng/uwsgi.ini:ro
    environment:
      - SEARXNG_BASE_URL=http://localhost:8080/
    networks:
      - brainlens-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/config"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis for SearXNG caching and embeddings cache
  redis-dev:
    image: redis:7-alpine
    container_name: brainlens-redis-dev
    restart: unless-stopped
    command: redis-server --save 60 1 --loglevel warning
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - brainlens-dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Qdrant Vector Database
  qdrant-dev:
    image: qdrant/qdrant:latest
    container_name: brainlens-qdrant-dev
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_dev_data:/qdrant/storage
      - ./qdrant/dev-config.yaml:/qdrant/config/production.yaml
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - brainlens-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database (for development)
  postgres-dev:
    image: postgres:15-alpine
    container_name: brainlens-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: brainlens_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dev_password_change_in_production
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - brainlens-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  redis_dev_data:
    driver: local
  qdrant_dev_data:
    driver: local
  postgres_dev_data:
    driver: local

networks:
  brainlens-dev:
    driver: bridge
    name: brainlens-development