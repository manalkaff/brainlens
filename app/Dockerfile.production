# Production Dockerfile for Wasp Learning Research Platform
# Using Ubuntu base for better Wasp compatibility

FROM node:20-slim AS base
RUN apt-get update && apt-get install -y \
    curl \
    bash \
    python3 \
    build-essential \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Build stage - uses the official Wasp build process
FROM base AS server-builder
WORKDIR /app

# Install Wasp
ENV USER=root
ENV HOME=/root
RUN curl -sSL https://get.wasp-lang.dev/installer.sh | bash -s

# Add Wasp to PATH properly
RUN echo 'export PATH=$PATH:/root/.local/bin' >> ~/.bashrc
ENV PATH="/root/.local/bin:${PATH}"

# Verify Wasp installation and PATH
RUN which wasp && wasp version

# Copy Wasp project files
COPY main.wasp ./
COPY migrations ./migrations/
COPY src ./src/
COPY public ./public/
COPY .wasproot ./
COPY package*.json ./
COPY tsconfig.json* ./
COPY tailwind.config* ./
COPY vite.config* ./

# Build Wasp application - this creates .wasp/build/
RUN wasp build

# Install npm packages for the built application
RUN npm install && cd .wasp/build/server && npm install

# Generate Prisma client
RUN cd .wasp/build/server && npx prisma generate --schema='../db/schema.prisma'

# Build the server bundle
RUN cd .wasp/build/server && npm run bundle

# Production stage
FROM base AS server-production
ENV NODE_ENV=production
WORKDIR /app

# Copy built Wasp application from builder stage
COPY --from=server-builder /app/node_modules ./node_modules
COPY --from=server-builder /app/.wasp/build/server/node_modules .wasp/build/server/node_modules
COPY --from=server-builder /app/.wasp/build/server/bundle .wasp/build/server/bundle
COPY --from=server-builder /app/.wasp/build/server/package*.json .wasp/build/server/
COPY --from=server-builder /app/.wasp/build/db/ .wasp/build/db/

# Expose port
EXPOSE 3001

WORKDIR /app/.wasp/build/server
ENTRYPOINT ["npm", "run", "start-production"]