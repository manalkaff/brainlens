# Production Dockerfile for Wasp Learning Research Platform
# Multi-stage build for optimized production image

# Stage 1: Build stage with Wasp
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Install system dependencies including curl for Wasp installation
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    curl \
    bash

# Install Wasp
RUN curl -sSL https://get.wasp-lang.dev/installer.sh | sh
ENV PATH="/root/.local/bin:${PATH}"

# Copy Wasp project files
COPY main.wasp ./
COPY migrations ./migrations/
COPY src ./src/
COPY public ./public/
COPY .wasproot ./
COPY package*.json ./
COPY tsconfig.json* ./
COPY tailwind.config* ./
COPY vite.config* ./

# Build the Wasp application
RUN wasp build

# Stage 2: Production stage
FROM node:18-alpine AS production

# Set environment
ENV NODE_ENV=production
ENV PORT=3001

# Create app user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S wasp -u 1001

# Set working directory
WORKDIR /app

# Install system dependencies for production
RUN apk add --no-cache \
    postgresql-client \
    curl \
    bash

# Copy built Wasp application from builder stage
COPY --from=builder --chown=wasp:nodejs /app/.wasp/build ./

# Copy production scripts
COPY --chown=wasp:nodejs deployment/backup-scripts ./scripts
COPY --chown=wasp:nodejs deployment/monitoring-setup.js ./monitoring.js

# Create necessary directories
RUN mkdir -p /app/logs /app/backups && \
    chown -R wasp:nodejs /app/logs /app/backups

# Make scripts executable
RUN chmod +x ./scripts/*.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:$PORT/health || exit 1

# Switch to non-root user
USER wasp

# Expose port
EXPOSE 3001

# Start command for Wasp application
CMD ["node", "./server.js"]