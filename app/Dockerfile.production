# Production Dockerfile for Learning Research Platform
# Multi-stage build for optimized production image

# Stage 1: Build stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git

# Copy package files
COPY package*.json ./
COPY .wasproot ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Stage 2: Production stage
FROM node:18-alpine AS production

# Set environment
ENV NODE_ENV=production
ENV PORT=3001

# Create app user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S wasp -u 1001

# Set working directory
WORKDIR /app

# Install system dependencies for production
RUN apk add --no-cache \
    postgresql-client \
    curl \
    bash

# Copy built application from builder stage
COPY --from=builder --chown=wasp:nodejs /app/.wasp/build ./
COPY --from=builder --chown=wasp:nodejs /app/node_modules ./node_modules

# Copy production scripts
COPY --chown=wasp:nodejs deployment/backup-scripts ./scripts
COPY --chown=wasp:nodejs deployment/monitoring-setup.js ./monitoring.js

# Create necessary directories
RUN mkdir -p /app/logs /app/backups && \
    chown -R wasp:nodejs /app/logs /app/backups

# Make scripts executable
RUN chmod +x ./scripts/*.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:$PORT/health || exit 1

# Switch to non-root user
USER wasp

# Expose port
EXPOSE 3001

# Start command
CMD ["node", "server.js"]