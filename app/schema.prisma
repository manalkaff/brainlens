datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  email                     String?         @unique
  username                  String?         @unique
  isAdmin                   Boolean         @default(false)

  paymentProcessorUserId    String?         @unique
  lemonSqueezyCustomerPortalUrl String?     // You can delete this if you're not using Lemon Squeezy as your payments processor.
  subscriptionStatus        String?         // 'active', 'cancel_at_period_end', 'past_due', 'deleted'
  subscriptionPlan          String?         // 'hobby', 'pro'
  datePaid                  DateTime?
  credits                   Int             @default(10)

  gptResponses              GptResponse[]
  contactFormMessages       ContactFormMessage[]
  tasks                     Task[]
  files                     File[]
  
  // Learning platform relations
  topicProgress             UserTopicProgress[]
  chatThreads               ChatThread[]
  quizzes                   Quiz[]
}

model GptResponse {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String
}

model Task {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  description               String
  time                      String          @default("1")
  isDone                    Boolean         @default(false)
}

model File {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  name                      String
  type                      String
  key                       String
  uploadUrl                 String
}

model DailyStats {
  id                               Int             @id @default(autoincrement())
  date                             DateTime        @default(now()) @unique

  totalViews                       Int             @default(0)
  prevDayViewsChangePercent        String          @default("0")
  userCount                        Int             @default(1)
  paidUserCount                    Int             @default(0)
  userDelta                        Int             @default(0)
  paidUserDelta                    Int             @default(0)
  totalRevenue                     Float           @default(0)
  totalProfit                      Float           @default(0)

  sources                          PageViewSource[]
}

model PageViewSource {
  @@id([date, name])
  name                     String
  date                     DateTime        @default(now())

  dailyStats               DailyStats?     @relation(fields: [dailyStatsId], references: [id])
  dailyStatsId             Int?

  visitors                 Int
}

model Logs {
  id                       Int             @id @default(autoincrement())
  createdAt                DateTime        @default(now())

  message                  String
  level                    String
}

model ContactFormMessage {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String
  isRead                    Boolean         @default(false)
  repliedAt                 DateTime?
}

// Learning Research Platform Models

model Topic {
  id          String   @id @default(uuid())
  slug        String   @unique
  title       String
  summary     String?
  description String?
  depth       Int      @default(0)
  parentId    String?
  parent      Topic?   @relation("TopicHierarchy", fields: [parentId], references: [id])
  children    Topic[]  @relation("TopicHierarchy")
  status      TopicStatus @default(RESEARCHING)
  metadata    Json?
  
  // Research tracking fields
  lastResearched DateTime?    // Last time this topic was researched
  researchVersion String?      // Version identifier for research data
  cacheStatus CacheStatus @default(STALE) // Cache status for intelligent refresh
  researchPriority Int @default(5) // Priority for research queue (1=highest, 5=lowest)
  subtopicsGenerated Boolean @default(false) // Whether subtopics have been generated
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userProgress    UserTopicProgress[]
  chatThreads     ChatThread[]
  quizzes         Quiz[]
  vectorDocuments VectorDocument[]
  generatedContent GeneratedContent[]
  
  @@index([slug])
  @@index([parentId])
  @@index([status])
  @@index([depth])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([status, depth])
  @@index([parentId, depth])
  @@index([lastResearched])
  @@index([cacheStatus])
  @@index([researchPriority])
  @@index([cacheStatus, lastResearched])
  @@index([status, researchPriority])
}

model GeneratedContent {
  id          String   @id @default(uuid())
  topicId     String   
  contentType String   // 'exploration', 'learning', 'quiz', 'cache', etc.
  content     String   // The generated MDX content
  metadata    Json?    // Additional metadata like user preferences, generation settings, research data
  sources     Json?    // Array of source attributions
  userLevel   String?  // 'beginner', 'intermediate', 'advanced', 'cache'
  learningStyle String? // 'textual', 'visual', 'interactive', 'cache', etc.
  cacheKey    String?  // Cache key for intelligent caching
  accessCount Int      @default(0) // Track cache access frequency
  lastAccess  DateTime @default(now()) // Last time this content was accessed
  researchVersion String? // Version of research used to generate content
  freshnessTtl Int?     // TTL in days for this specific content
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  topic       Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  
  @@unique([topicId, contentType, userLevel, learningStyle])
  @@index([topicId])
  @@index([contentType])
  @@index([createdAt])
  @@index([topicId, contentType])
  @@index([cacheKey])
  @@index([lastAccess])
  @@index([accessCount])
  @@index([contentType, createdAt])
}

model UserTopicProgress {
  id           String   @id @default(uuid())
  userId       String
  topicId      String
  completed    Boolean  @default(false)
  timeSpent    Int      @default(0) // in seconds
  lastAccessed DateTime @default(now())
  preferences  Json?    // learning style, knowledge level
  bookmarks    String[] // array of content IDs
  
  user         User     @relation(fields: [userId], references: [id])
  topic        Topic    @relation(fields: [topicId], references: [id])
  
  @@unique([userId, topicId])
  @@index([userId])
  @@index([topicId])
  @@index([lastAccessed])
  @@index([completed])
  @@index([userId, completed])
  @@index([userId, lastAccessed])
  @@index([topicId, completed])
}

model ChatThread {
  id        String    @id @default(uuid())
  userId    String
  topicId   String
  title     String?
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  user      User      @relation(fields: [userId], references: [id])
  topic     Topic     @relation(fields: [topicId], references: [id])
  
  @@index([userId])
  @@index([topicId])
  @@index([createdAt])
}

model Message {
  id           String     @id @default(uuid())
  threadId     String
  role         MessageRole
  content      String
  metadata     Json?
  createdAt    DateTime   @default(now())
  
  thread       ChatThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  
  @@index([threadId])
  @@index([createdAt])
}

model Quiz {
  id          String        @id @default(uuid())
  topicId     String
  userId      String
  title       String
  questions   QuizQuestion[]
  score       Float?
  completed   Boolean       @default(false)
  completedAt DateTime?
  createdAt   DateTime      @default(now())
  
  topic       Topic         @relation(fields: [topicId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([topicId])
  @@index([completed])
  @@index([createdAt])
}

model QuizQuestion {
  id          String      @id @default(uuid())
  quizId      String
  question    String
  type        QuestionType
  options     String[]    // JSON array for multiple choice
  correctAnswer String
  explanation String?
  userAnswer  String?
  isCorrect   Boolean?
  
  quiz        Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  @@index([quizId])
}

model VectorDocument {
  id          String   @id @default(uuid())
  topicId     String
  content     String
  embedding   String   // JSON serialized vector
  metadata    Json
  createdAt   DateTime @default(now())
  
  topic       Topic    @relation(fields: [topicId], references: [id])
  
  @@index([topicId])
  @@index([createdAt])
  @@index([topicId, createdAt])
}

// Enums for Learning Platform
enum TopicStatus {
  RESEARCHING
  COMPLETED
  ERROR
  PENDING
}

enum CacheStatus {
  FRESH      // Content is up to date
  STALE      // Content needs refresh
  REFRESHING // Currently being refreshed
  ERROR      // Error during refresh
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_BLANK
  CODE_CHALLENGE
}
